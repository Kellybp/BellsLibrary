@using BellsLibrary.API.Services.Models
@using Microsoft.FluentUI.AspNetCore.Components
@using Drawing = System.Drawing

@implements IDialogContentComponent<BookEntity>

<FluentDialogBody>
    <FluentStack Orientation="Orientation.Vertical">
        @* Title *@
        <FluentTextField @bind-Value="@Content.Title">
            <LabelTemplate>
                <FluentLabel Weight="FontWeight.Bold">
                    <FluentStack Orientation="Orientation.Horizontal">
                        <span>Book Title</span>
                        <FluentLabel Color="Color.Error">*</FluentLabel>
                    </FluentStack>  
                </FluentLabel>
            </LabelTemplate>
        </FluentTextField>
        <FluentSpacer Width="10" />
        @* Description *@
        <FluentTextArea Cols="60" Rows="5" @bind-Value="@Content.Description">
            <LabelTemplate>
                <FluentLabel Weight="FontWeight.Bold">
                    Description
                </FluentLabel>
            </LabelTemplate>
        </FluentTextArea>
        <FluentSpacer Width="10" />
        @* Image *@
        <FluentInputFile Id="my-file-uploader"
                         Mode="InputFileMode.SaveToTemporaryFolder"
                         Multiple="false"
                         MaximumFileCount="1"
                         MaximumFileSize="@(10*1024*1024)"
                         Accept="image/*"
                         @bind-ProgressPercent="@ProgressPercent"
                         OnCompleted="@OnCompletedAsync"
                         Style="height: 300px; border: 1px dashed var(--accent-fill-rest);">
            <ChildContent>
                <label for="my-file-uploader">
                    <FluentIcon Value="@(new @Icons.Regular.Size24.ArrowUpload())" />
                </label>

                <div>
                    Drag files here you wish to upload,
                    or <label for="my-file-uploader">browse</label>
                    for them<span style="color: red;">*</span>.
                </div>

                @* <div>
                    <br />
                    <a href="#">Read more about our supported file formats.</a>
                </div> *@
            </ChildContent>
        </FluentInputFile>
        @if (Content.Id != Guid.Empty)
        {
            <img id="image" src="data:image;base64,@System.Convert.ToBase64String(Content.CoverImage)" alt="Converted Image">

        }

        @if (Files.Any())
        {
            <h4>File(s) uploaded:</h4>
            <ul>
                @foreach (var file in Files)
                {
                    <li>
                        <b>@file.Name</b> 🔹
                        @($"{Decimal.Divide(file.Size, 1024):N} KB") 🔹
                        @file.ContentType 🔹
                        @file.LocalFile?.FullName
                        @file.ErrorMessage
                    </li>
                }
            </ul>
        }

        @* Publication Date *@
        @* <FluentDatePicker @bind-Value="@Content.PublicationDate" Label="Publication Date" Style="height: 250px;" /> *@
        @* ISBN *@
        <FluentTextField @bind-Value="@Content.ISBN">
            <LabelTemplate>
                <FluentLabel Weight="FontWeight.Bold">
                    <FluentStack Orientation="Orientation.Horizontal">
                        <span>Book ISBN</span>
                        <FluentLabel Color="Color.Error">*</FluentLabel>
                    </FluentStack>  
                </FluentLabel>
            </LabelTemplate>
        </FluentTextField>
        @* PgCount *@
        <FluentNumberField @bind-Value="@Content.PgCount">
            <LabelTemplate>
                <FluentLabel Weight="FontWeight.Bold">
                    <FluentStack Orientation="Orientation.Horizontal">
                        <span>Book PgCount</span>
                        <FluentLabel Color="Color.Error">*</FluentLabel>
                    </FluentStack>  
                </FluentLabel>
            </LabelTemplate>
        </FluentNumberField>
        @* Author *@
        <FluentTextField @bind-Value="@Content.Author">
            <LabelTemplate>
                <FluentLabel Weight="FontWeight.Bold">
                    <FluentStack Orientation="Orientation.Horizontal">
                        <span>Book Author</span>
                        <FluentLabel Color="Color.Error">*</FluentLabel>
                    </FluentStack>  
                </FluentLabel>
            </LabelTemplate>
        </FluentTextField>
        @* Publisher *@
        <FluentTextArea @bind-Value="@Content.Publisher">
            <LabelTemplate>
                <FluentLabel Weight="FontWeight.Bold">
                    Description
                </FluentLabel>
            </LabelTemplate>
        </FluentTextArea>
        @* Category *@
        <FluentTextField @bind-Value="@Content.Category">
            <LabelTemplate>
                <FluentLabel Weight="FontWeight.Bold">
                    <FluentStack Orientation="Orientation.Horizontal">
                        <span>Book Category</span>
                        <FluentLabel Color="Color.Error">*</FluentLabel>
                    </FluentStack>  
                </FluentLabel>
            </LabelTemplate>
        </FluentTextField>
        @* ModificationDate *@
        @if(Content.Id != Guid.Empty)
        {
            <FluentSpacer Width="10" />
            <FluentStack Orientation="Orientation.Vertical">
                <FluentLabel Weight="FontWeight.Bold">Created</FluentLabel>
                <FluentLabel>@Content.Created.ToString("dd-MM-yyyy")</FluentLabel>
            </FluentStack>
            
            @if(Content.Modified.HasValue)
            {
                <FluentSpacer Width="10" />
                <FluentStack Orientation="Orientation.Vertical">
                    <FluentLabel Weight="FontWeight.Bold">Modified</FluentLabel>
                    <FluentLabel>@Content.Modified?.ToString("dd-MM-yyyy")</FluentLabel>
                </FluentStack>
            }
        }
        @* CheckOut *@
        @* @if (Content.Id != Guid.Empty)
        {
            <FluentCheckbox>
                <LabelTemplate>
                    <FluentLabel Weight="FontWeight.Bold">
                        CheckIn
                    </FluentLabel>
                </LabelTemplate>
            </FluentCheckbox>
        } *@
        
    </FluentStack>
</FluentDialogBody>

@code {
    [Parameter]
    public BookEntity Content { get; set; } = default!;
    public Drawing.Bitmap bmp { get; set; }
    public bool checkIn = false;    

    int ProgressPercent = 0;
    FluentInputFileEventArgs[] Files = Array.Empty<FluentInputFileEventArgs>();

    private async Task OnCompletedAsync(IEnumerable<FluentInputFileEventArgs> files)
    {
        Files = files.ToArray();

        Content.CoverImage = CovertToBytes(Files[0].LocalFile.ToString());

        // For the demo, delete these files.
        foreach (var file in Files)
        {
            file.LocalFile?.Delete();
        }

        // Wait 3 seconds before to reset the progress bar.
        await Task.Delay(3000);
        ProgressPercent = 0;
    }

    private byte[] CovertToBytes(string filePath)
    {
        try
        {
            byte[] fileBytes = File.ReadAllBytes(filePath);
            return fileBytes;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex.Message}");
            return null;
        }
    }
}